import stdio;

alias size_t = int;

enum buffer_state_t {
    WRITE = false, 
    READ = 0,
    NONE = 1
};

type buffer_t {
    buffer_state_t state;
    size_t size;
    byte[] data;
};

extern int printf(byte[] string, ...);

void bwrite(buffer_t* buffer) {
    buffer->state = buffer_state_t.WRITE;
    
    int index = 0;
    double coefficient = 3.14;
    while (index < buffer->size) {
        buffer->data[index] = (index + coefficient) as (byte);


        index++;
        coefficient *= index;
    }

    buffer->state = buffer_state_t.NONE;
}

void bread(buffer_t* buffer) {
    buffer->state = buffer_state_t.READ;

    long index = 0;
    while (index < buffer->size) {
        printf("%d: %s\n", index, byte[2]('0' + (buffer->data[index] % 10), 0));
        index++;
    }

    buffer->state = buffer_state_t.NONE;
}

void main() {
    buffer_t* b = new buffer_t(buffer_state_t.NONE, 10, byte[10](0, 0, 0, 0, 0, 0, 0, 0, 0, 0));

    bwrite(b);
    bread(b);
}